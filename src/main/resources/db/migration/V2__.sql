-- ========= DROP constraints before dropping tables =========

-- Only drop constraints if table still exists
DO $$
    BEGIN
        IF EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_payments_on_order') THEN
            ALTER TABLE payments DROP CONSTRAINT fk_payments_on_order;
        END IF;
        IF EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_review_on_product') THEN
            ALTER TABLE review DROP CONSTRAINT fk_review_on_product;
        END IF;
        IF EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_review_on_user') THEN
            ALTER TABLE review DROP CONSTRAINT fk_review_on_user;
        END IF;
    END $$;

-- ========== Drop tables if they still exist ==========
DROP TABLE IF EXISTS contact_message CASCADE;
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS review CASCADE;

-- ========== Create new tables ==========
DROP TABLE IF EXISTS order_payments CASCADE;

CREATE TABLE order_payments (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                order_id VARCHAR(255) NOT NULL,
                                momo_reference_id VARCHAR(255),
                                external_id VARCHAR(255),
                                amount DECIMAL(12, 2) NOT NULL,
                                currency VARCHAR(255) NOT NULL,
                                customer_phone VARCHAR(255) NOT NULL,
                                customer_name VARCHAR(255) NOT NULL,
                                customer_email VARCHAR(255),
                                payment_description VARCHAR(255),
                                order_items TEXT,
                                payment_status VARCHAR(255) NOT NULL,
                                momo_transaction_id VARCHAR(255),
                                error_reason VARCHAR(255),
                                payment_initiated_at TIMESTAMP NOT NULL,
                                payment_completed_at TIMESTAMP,
                                created_at TIMESTAMP NOT NULL,
                                updated_at TIMESTAMP
);

CREATE TABLE payment (
                         id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         payment_type VARCHAR(31),
                         order_id BIGINT,
                         amount DECIMAL,
                         currency VARCHAR(255),
                         method VARCHAR(255),
                         status VARCHAR(255),
                         payment_date TIMESTAMP,
                         transaction_id VARCHAR(255),
                         card_number VARCHAR(255),
                         card_holder_name VARCHAR(255),
                         expiry_date VARCHAR(255),
                         cvv VARCHAR(255),
                         billing_address VARCHAR(255),
                         phone_number VARCHAR(255),
                         rwanda_id_number VARCHAR(255)
);

CREATE TABLE product_images (
                                product_id BIGINT NOT NULL,
                                image_url VARCHAR(512)
);

CREATE TABLE review_comments (
                                 id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 content VARCHAR(1000) NOT NULL,
                                 created_at TIMESTAMP NOT NULL,
                                 review_id BIGINT,
                                 user_id BIGINT
);

CREATE TABLE reviews (
                         id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         content VARCHAR(2000) NOT NULL,
                         rating INTEGER NOT NULL,
                         created_at TIMESTAMP NOT NULL,
                         updated_at TIMESTAMP NOT NULL,
                         product_id BIGINT,
                         user_id BIGINT
);

-- ========== Alter existing tables ==========

-- Add new user fields
ALTER TABLE users ADD COLUMN account_non_expired BOOLEAN NOT NULL DEFAULT TRUE;
ALTER TABLE users ADD COLUMN account_non_locked BOOLEAN NOT NULL DEFAULT TRUE;
ALTER TABLE users ADD COLUMN credentials_non_expired BOOLEAN NOT NULL DEFAULT TRUE;

-- Step-by-step safe migration for 'enabled' field
ALTER TABLE users ADD COLUMN enabled BOOLEAN DEFAULT TRUE;
UPDATE users SET enabled = true WHERE enabled IS NULL;
ALTER TABLE users ALTER COLUMN enabled SET NOT NULL;

ALTER TABLE users ADD COLUMN first_name VARCHAR(50);
ALTER TABLE users ADD COLUMN last_name VARCHAR(50);
ALTER TABLE users ADD COLUMN phone_number VARCHAR(255);
ALTER TABLE users ADD COLUMN profile_picture_url VARCHAR(255);
ALTER TABLE users ADD COLUMN description TEXT;

-- Product image fields
ALTER TABLE products ADD COLUMN image_urls VARCHAR(255);
ALTER TABLE products ADD COLUMN main_image VARCHAR(512);
ALTER TABLE products ADD COLUMN main_image_url VARCHAR(255);

-- Order additional info
ALTER TABLE orders ADD COLUMN rwanda_phone_number VARCHAR(255);
ALTER TABLE orders ADD COLUMN rwanda_tax_code VARCHAR(255);

-- Wishlist sharing
ALTER TABLE wishlists ADD COLUMN share_token VARCHAR(255);
ALTER TABLE wishlists ADD COLUMN share_token_expiry TIMESTAMP;

-- Avoid slug conflict if already exists
DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_name = 'categories'
              AND column_name = 'slug'
        ) THEN
            ALTER TABLE categories ADD COLUMN slug VARCHAR(255);
        END IF;
    END $$;

-- ========== Add constraints ==========

ALTER TABLE reviews ADD CONSTRAINT uc_reviews_product_user UNIQUE (product_id, user_id);

ALTER TABLE order_payments ADD CONSTRAINT uc_order_payments_external UNIQUE (external_id);
ALTER TABLE order_payments ADD CONSTRAINT uc_order_payments_momo_reference UNIQUE (momo_reference_id);
ALTER TABLE order_payments ADD CONSTRAINT uc_order_payments_order UNIQUE (order_id);

ALTER TABLE payment ADD CONSTRAINT uc_payment_order UNIQUE (order_id);
ALTER TABLE payment ADD CONSTRAINT FK_PAYMENT_ON_ORDER FOREIGN KEY (order_id) REFERENCES orders (id);

ALTER TABLE reviews ADD CONSTRAINT FK_REVIEWS_ON_PRODUCT FOREIGN KEY (product_id) REFERENCES products (id);
ALTER TABLE reviews ADD CONSTRAINT FK_REVIEWS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE review_comments ADD CONSTRAINT FK_REVIEW_COMMENTS_ON_REVIEW FOREIGN KEY (review_id) REFERENCES reviews (id);
ALTER TABLE review_comments ADD CONSTRAINT FK_REVIEW_COMMENTS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE product_images ADD CONSTRAINT fk_product_images_on_product FOREIGN KEY (product_id) REFERENCES products (id);
